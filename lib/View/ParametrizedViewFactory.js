'use strict';

// Including Lala's modules.
const BaseViewFactory = require('./BaseViewFactory');
const {
    InvalidArgumentException
} = require('../Exceptions');

/**
 * Allows to configure and generate views.
 *
 * @abstract
 */
class ParametrizedViewFactory extends BaseViewFactory {
    /**
     * The class constructor.
     *
     * @param {string} path A string containing the path to the file that implements the view layout.
     *
     * @throws {InvalidArgumentException} If an invalid path is given.
     */
    constructor(path){
        super(path);

        /**
         * @type {?Object} [_staticParams] An object containing some parameters that will be included in any view instance generated by this factory.
         *
         * @private
         */
        this._staticParams = null;
    }

    /**
     * Sets the parameters to include in any iew instance generated by this factory, this method is chainable.
     *
     * @param {?Object} staticParams An object having as key the parameter name and as value the parameter.
     *
     * @returns {ParametrizedViewFactory}
     */
    setStaticParams(staticParams){
        if ( typeof staticParams !== 'object' ){
            throw new InvalidArgumentException('Invalid parameters.', 1);
        }
        this._staticParams = staticParams;
        return this;
    }

    /**
     * Returns the parameters to include in any iew instance generated by this factory.
     *
     * @returns {?Object} An object containing the parameters or null if no parameter has been defined.
     */
    getStaticParams(){
        return this._staticParams;
    }

    /**
     * Generates a new view based on the configuration defined.
     *
     * @param {?Object.<string, *>} [params] An object containing some parameters to pass to the templating engine or null if no parameter should be passed.
     * @param {?Context} [context] An instance of the class context containing the request and response objects obtained from a server.
     *
     * @throws {NotCallableException} If this method is called without been overridden and implemented.
     *
     * @abstract
     * @override
     */
    craft(params = null, context = null) {
        super.craft();
    }
}

module.exports = ParametrizedViewFactory;
