'use strict';

// Including third part modules.
let Sentry = null;
try {
    Sentry = require('@sentry/node');
}catch{}

// Including native modules.
const os = require('os');

// Including Lala's modules.
const Reporter = require('./Reporter');
const constants = require('../../constants');
const {
    InvalidArgumentException,
    DependencyMissingException
} = require('../../Exceptions');

/**
 * @typedef {ReportOptions} SentryReportOptions An object containing some additional data used to enrich Sentry reports.
 *
 * @property {?Object.<string, *>} [user] An object containing some additional information about the user who caused the issue being reported.
 * @property {?Object.<string, string>} [tags] An object containing some additional custom tags as key/value pairs.
 * @property {?string} [fingerprint] A string representing an arbitrary value used for grouping events into issues.
 * @property {?Object.<string, string>} [extra] An object containing some additional custom data that will be shown alongside the reported message.
 */

/**
 * @typedef {ErrorReportOptions} SentryErrorReportOptions An object containing some additional data used to enrich Sentry reports.
 *
 * @property {?Object.<string, *>} [user] An object containing some additional information about the user who caused the issue being reported.
 * @property {?Object.<string, string>} [tags] An object containing some additional custom tags as key/value pairs.
 * @property {?string} [fingerprint] A string representing an arbitrary value used for grouping events into issues.
 * @property {?Object.<string, string>} [extra] An object containing some additional custom data that will be shown alongside the reported message.
 */

/**
 * Implements logging on the Sentry reporting system.
 *
 * @see https://sentry.io
 */
class SentryReporter extends Reporter {
    /**
     * Sets up the Sentry reporting system.
     *
     * @param {string} dsn A string containing the DSN address provided by Sentry.
     *
     * @throws {InvalidArgumentException} If an invalid DSN key is given.
     * @throws {DependencyMissingException} If the Sentry's SDK has not been installed.
     */
    static setup(dsn){
        if ( dsn === '' || typeof dsn !== 'string' ){
            throw new InvalidArgumentException('Invalid dsn.', 1);
        }
        if ( Sentry === null ){
            throw new DependencyMissingException('Sentry\'s SDK has not been installed.', 2);
        }
        // Setup the Sentry SDK.
        Sentry.init({
            dsn: dsn
        });
    }

    /**
     * Configures a given scope according to some given options.
     *
     * @param {Scope} scope An object representing the scope generated by the Sentry SDK.
     * @param {(SentryReportOptions|SentryErrorReportOptions)} options The object containing additional options passed to the caller method.
     * @param {string} defaultLevel A string containing the verbosity level to use if an invalid level is found in options.
     *
     * @protected
     */
    _configureScope(scope, options, defaultLevel){
        // Configure the scope using given options.
        if ( options.user !== null && typeof options.user === 'object' ){
            scope.setUser(options.user);
        }
        if ( options.tags !== null && typeof options.tags === 'object' ){
            for ( const name in options.tags ){
                if ( options.tags.hasOwnProperty(name) ){
                    scope.setTag(name, options.tags);
                }
            }
        }
        scope.setLevel(typeof options.level === 'string' ? options.level : defaultLevel);
        if ( options.fingerprint !== '' && typeof options.fingerprint === 'string' ){
            scope.setFingerprint([options.fingerprint]);
        }
        if ( options.extra !== null && typeof options.extra === 'object' ){
            for ( const name in options.extra ){
                if ( options.extra.hasOwnProperty(name) ){
                    scope.setExtra(name, options.extra);
                }
            }
        }
        // Adding internal information to the scope.
        scope.setTag('Node.js', process.version);
        scope.setTag('Lala.js', 'v' + constants.VERSION);
        scope.setTag('Hostname', os.hostname());
        scope.setTag('Arch', process.arch);
        scope.setTag('Platform', process.platform);
        scope.setTag('OS Release', os.release());
        scope.setTag('OS Type', os.type());
        scope.setTag('V8', process.versions.v8);
    }

    /**
     * The class constructor.
     */
    constructor() {
        super();
    }

    /**
     * Reports a given message.
     *
     * @param {string} message A string containing the message to report.
     * @param {?SentryReportOptions} [options] An object containing some additional option the method should take care of.
     *
     * @returns {Promise<void>}
     *
     * @throws {InvalidArgumentException} If an invalid message is given.
     * @throws {InvalidArgumentException} If an invalid options object is given.
     * @throws {DependencyMissingException} If the Sentry's SDK has not been installed.
     *
     * @async
     */
    async report(message, options = null){
        if ( typeof message !== 'string' ){
            throw new InvalidArgumentException('Invalid message.', 1);
        }
        if ( options === null ){
            options = {};
        }else if ( typeof options !== 'object' ){
            throw new InvalidArgumentException('Invalid options.', 2);
        }
        if ( Sentry === null ){
            throw new DependencyMissingException('Sentry\'s SDK has not been installed.', 3);
        }
        // Generate a new scope in order to attach given options to the report that will be sent.
        Sentry.withScope((scope) => {
            // Add given options tot he generated scope.
            this._configureScope(scope, options, 'info');
            // Send the report to Sentry.
            Sentry.captureMessage(message);
        });
    }

    /**
     * Reports a given error.
     *
     * @param {Error} error The error or the exception to report.
     * @param {?SentryErrorReportOptions} [options] An object containing some additional option the method should take care of.
     *
     * @returns {Promise<void>}
     *
     * @throws {InvalidArgumentException} If an invalid message is given.
     * @throws {InvalidArgumentException} If an invalid options object is given.
     * @throws {DependencyMissingException} If the Sentry's SDK has not been installed.
     *
     * @async
     */
    async reportError(error, options = null){
        if ( !( error instanceof Error ) ){
            throw new InvalidArgumentException('Invalid error.', 1);
        }
        if ( options === null ){
            options = {};
        }else if ( typeof options !== 'object' ){
            throw new InvalidArgumentException('Invalid options.', 2);
        }
        if ( Sentry === null ){
            throw new DependencyMissingException('Sentry\'s SDK has not been installed.', 3);
        }
        // Generate a new scope in order to attach given options to the report that will be sent.
        Sentry.withScope((scope) => {
            // Add given options tot he generated scope.
            this._configureScope(scope, options, 'error');
            // Send the report to Sentry.
            Sentry.captureException(error);
        });
    }
}

module.exports = SentryReporter;
